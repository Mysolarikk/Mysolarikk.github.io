{"version":3,"sources":["pages/HomePage/index.module.css","App.module.css","reducer/windowSize.js","reducer/index.js","pages/HomePage/index.js","util.js","App.js","components/withWindowSizeListener.js","serviceWorker.js","index.js"],"names":["module","exports","col","row","App","UPDATE","initialState","width","height","actions","update","_ref","type","reducer","combineReducers","windowSize","state","arguments","length","undefined","action","Object","objectSpread","PADDING","MIN_GRAPH_WIDTH","GRAPH_HEIGHT","Graph","props","react_default","a","createElement","style","padding","backgroundColor","POWER_PLANTS","toConsumableArray","Array","map","_","i","id","devices","connect","windowWidth","numGraphsPerRow","graphWidth","Math","max","floor","className","styles","arr","size","chunks","push","slice","chunk","plants","key","plant","PowerPlantDetailPage","withWindowSizeListener","Component","process","react_router","path","component","HomePage","ref","useRef","useEffect","setWindowSize","dispatch","current","clientHeight","clientWidth","window","addEventListener","removeEventListener","Boolean","location","hostname","match","middlewares","thunk","store","createStore","applyMiddleware","apply","ReactDOM","render","react_router_dom","basename","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.320096cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"col\":\"HomePage_col__33bFf\",\"row\":\"HomePage_row__i7JCH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","const UPDATE = \"WINDOW_SIZE/UPDATE\"\n\nconst initialState = {\n  width: 0,\n  height: 0,\n}\n\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE:\n      return {\n        ...state,\n        width: action.width,\n        height: action.height,\n      }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  update: ({ width, height }) => ({ type: UPDATE, width, height }),\n}\n","import { combineReducers } from \"redux\"\nimport * as windowSize from \"./windowSize\"\n\nexport const reducer = combineReducers({\n  windowSize: windowSize.reducer,\n})\n\nexport const actions = {\n  windowSize: windowSize.actions,\n}\n\nexport const selectors = {}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport { chunk } from \"../../util\"\nimport styles from \"./index.module.css\"\n\nconst PADDING = 10\nconst MIN_GRAPH_WIDTH = 340\nconst GRAPH_HEIGHT = 210\n\nexport function getNumGraphsPerRow(windowWidth) {\n  if (windowWidth < MIN_GRAPH_WIDTH * 2 + 2 * PADDING) {\n    return 1\n  }\n  if (windowWidth < MIN_GRAPH_WIDTH * 3 + 2 * PADDING) {\n    return 2\n  }\n  if (windowWidth < MIN_GRAPH_WIDTH * 5 + 2 * PADDING) {\n    return 3\n  }\n\n  return 5\n}\n\nfunction Graph(props) {\n  const { width, height } = props\n  const padding = 10\n\n  return (\n    <div style={{ padding, width, height }}>\n      <div\n        style={{\n          backgroundColor: \"#eaeaea\",\n          width: width - 2 * padding,\n          height: height - 2 * padding,\n        }}\n      />\n    </div>\n  )\n}\n\nconst POWER_PLANTS = [...new Array(23)].map((_, i) => ({\n  id: i,\n  devices: {\n    length: 30,\n  },\n}))\n\nexport function HomePage(props) {\n  const numGraphsPerRow = getNumGraphsPerRow(props.windowSize.width)\n  const graphWidth = Math.max(\n    Math.floor((props.windowSize.width - 2 * PADDING) / numGraphsPerRow),\n    MIN_GRAPH_WIDTH\n  )\n\n  return (\n    <div>\n      <h1>Plants (123)</h1>\n\n      <div className={styles.col}>\n        {chunk(POWER_PLANTS, numGraphsPerRow).map((plants, i) => (\n          <div key={i} className={styles.row}>\n            {plants.map(plant => (\n              <Graph key={plant.id} width={graphWidth} height={GRAPH_HEIGHT} />\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nHomePage.propTypes = {\n  windowSize: PropTypes.shape({\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }).isRequired,\n}\n\nexport default connect(state => ({ windowSize: state.windowSize }))(HomePage)\n","export function compose(...funcs) {\n  return val =>\n    funcs\n      .slice()\n      .reverse()\n      .reduce((v, f) => {\n        return f(v)\n      }, val)\n}\n\nexport function chunk(arr, size) {\n  let chunks = []\n\n  for (let i = 0; i < arr.length; i += size) {\n    chunks.push(arr.slice(i, i + size))\n  }\n\n  return chunks\n}\n","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport styles from \"./App.module.css\"\nimport withWindowSizeListener from \"./components/withWindowSizeListener\"\nimport HomePage from \"./pages/HomePage\"\n\nconst PowerPlantDetailPage = () => <div>power plant detail</div>\n\nexport function App() {\n  return (\n    <div className={styles.App}>\n      <h5>Time zone: {process.env.REACT_APP_TIME_ZONE}</h5>\n\n      <Switch>\n        <Route path=\"/plants/:plantId\" component={PowerPlantDetailPage} />\n        <Route component={HomePage} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default withWindowSizeListener(App)\n","import React, { useEffect, useRef } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport { actions } from \"../reducer\"\n\nexport default function withWindowSizeListener(Component) {\n  function WindowSizeListner(props) {\n    const ref = useRef()\n\n    useEffect(\n      () => {\n        function setWindowSize() {\n          props.dispatch(\n            actions.windowSize.update({\n              // size of DOM\n              height: ref.current.clientHeight,\n              width: ref.current.clientWidth,\n            })\n          )\n        }\n\n        setWindowSize()\n        window.addEventListener(\"resize\", setWindowSize)\n\n        return () => {\n          window.removeEventListener(\"resize\", setWindowSize)\n        }\n      },\n      [props]\n    )\n\n    return (\n      <div ref={ref}>\n        <Component {...props} />\n      </div>\n    )\n  }\n\n  WindowSizeListner.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n  }\n\n  return connect()(WindowSizeListner)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"semantic-ui-css/semantic.min.css\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\n// redux\nimport { applyMiddleware, createStore } from \"redux\"\nimport { Provider } from \"react-redux\"\nimport thunk from \"redux-thunk\"\nimport logger from \"redux-logger\"\nimport { reducer } from \"./reducer\"\n\nlet middlewares = [thunk]\nif (process.env.NODE_ENV !== \"production\") {\n  middlewares.push(logger)\n}\n\nconst store = createStore(reducer, applyMiddleware(...middlewares))\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}